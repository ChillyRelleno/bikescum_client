import React, { Component } from 'react';
import FileReaderInput from 'react-file-reader-input';
import GPXParser from './loadgpx.js';
import GMap from './GMap.jsx';
import AqiComponent from './AqiComponent.jsx';
import toGeoJSON from './lib/togeojson.js';

class GpxFileComponent extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      isFileSelected : false,
      gpx : null,
      boundingBox : null,
      geoJson : null
    };
    this.parseXml = this.chooseXmlParser();
  }//constructor

  loadGPXFileIntoGoogleMap = (map, file) => {
    var data = file[0][0].target.result;
    var xml = this.parseXml(data);
    //Setup parser
    var parser = new GPXParser(xml, map);
    //parser.setTrackColour("#ff0000");     // Set the track line colour
    //parser.setTrackWidth(5);          // Set the track line width
    //parser.setMinTrackPointDelta(0.001);      // Set the minimum distance between track points

    //prepare for draw, change state
    var fileBoundingBox = parser.centerAndZoom(xml);
    //var geoData = toGeoJSON.gpx(xml);
    this.setState({gpx: parser, isFileSelected: true, boundingBox: fileBoundingBox});//, geoJson: geoData});

      //this.props.map.data.loadGeoJson(geoData);

      //Draw with parser library, to replace with own overlay
      //parser.addTrackpointsToMap();         // Add the trackpoints
      //parser.addRoutepointsToMap();         // Add the routepoints
      //parser.addWaypointsToMap();           // Add the waypoints

    }//if xml loaded
  }//loadGPXFileIntoGoogleMap

  handleChange = function(e, results) {
    console.log('OnChange Fired, results = ');
    console.log(results);
    results.forEach(result => {
      const [e, file] = result;
      console.log(`Successfully loaded ${file.name}!`);
    });
    //Plot gpx path
    var parser = this.loadGPXFileIntoGoogleMap(this.props.map, results);
  }//handleChange

  componentDidMount() {
  }//componentDidMount

  render() {
    var toDisplay;
    var selectFile;
    if (this.state.isFileSelected == true) {
        selectFile = null;
	
	toDisplay = ( <AqiComponent boundingBox = {this.state.boundingBox}/> );
	
    }
    else {
      selectFile = (
        <form>
          <FileReaderInput as="text" id="gpx-file-input"
	      onChange={this.handleChange.bind(this)}>
            <button type="button">Select a file!</button>
          </FileReaderInput>
        </form>
       );
       toDisplay = selectFile;
    }//else
      return toDisplay;
  }//render

  chooseXmlParser = function() {
    //Choose how to parse based on browser
    if (window.DOMParser) {
        return function(xmlStr) {
            return ( new window.DOMParser() ).parseFromString(xmlStr, "text/xml");
        };
    } else if (typeof window.ActiveXObject != "undefined" && new window.ActiveXObject("Microsoft.XMLDOM")) {
        return function(xmlStr) {
            var xmlDoc = new window.ActiveXObject("Microsoft.XMLDOM");
            xmlDoc.async = "false";
            xmlDoc.loadXML(xmlStr);
            return xmlDoc;
        };
    } else {
        return function() { return null; }
    }
  }//chooseXmlParser


}//component
export default GpxFileComponent;
